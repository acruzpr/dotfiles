
# vi:ft=sh

SHELL=/opt/local/bin/bash

################################################################################
# Mac-specific things
# if [ "$UNAME" == Darwin ]; then
################################################################################

# ========================= NON-INTERACTIVE STUFF ==============================
# (Keep this to a minimum to speed up e.g. MacVim startup)

test -z "$SUBSHELL" && {
    # Don't add to subshells
    #path_append /opt/local/lib/gromacs/bin
    path_prepend /opt/local/Library/Frameworks/Python.framework/Versions/Current/bin
    #path_append /opt/espresso/bin
    #path_append $HOME/source/python/ase/tools
    #path_append /usr/local/cuda/bin
    #path_append /opt/p4vasp/bin

    #path_prepend /opt/openmpi/bin
    #path_append DYLD_LIBRARY_PATH /opt/openmpi/lib
    #path_append LD_LIBRARY_PATH /opt/openmpi/lib

    path_append MANPATH /usr/share/man
    path_append MANPATH /usr/local/man
    path_append MANPATH /opt/X11/share/man
    path_append MANPATH /opt/openmpi/share/man

    path_append "$HOME/Documents/Studier/Master/scripts"
    path_append PYTHONPATH "$HOME/Documents/Studier/Master/scripts"
    path_append "$HOME/code/python/oppvasp/scripts"
    path_append PYTHONPATH "$HOME/code/python/oppvasp/scripts"
    path_append PYTHONPATH /opt/local/Library/Frameworks/Python.framework/Versions/Current/lib/python2.7/site-packages

    #path_append PYTHONPATH /usr/local/lib/python2.7/site-packages
    #path_append PYTHONPATH "$HOME/includes/python2.7"
    #path_append PYTHONPATH $HOME/code/python
    path_append PYTHONPATH $HOME/lib/python
    path_append PYTHONPATH $HOME/lib/python2.7/site-packages
    path_append PYTHONPATH /opt/p4vasp/lib/python2.4/site-packages

    path_prepend PERL5LIB $HOME/lib/perl

    # MacPorts
    path_prepend /opt/local/sbin
    path_prepend /opt/local/bin
    path_prepend MANPATH /opt/local/share/man
    #path_prepend DYLD_LIBRARY_PATH /opt/local/lib
    #path_prepend LD_LIBRARY_PATH /opt/local/lib
    #path_prepend /opt/local/lib

    # TexLive
    path_append /usr/texbin

    # RVM
    path_append "$HOME/rvm/bin"

    # Android SDK
    path_append "$HOME/adt-bundle-mac-x86_64-20130514/sdk/platform-tools"
    path_append "$HOME/adt-bundle-mac-x86_64-20130514/sdk/tools"
    export ANDROID_HOME="$HOME/adt-bundle-mac-x86_64-20130514/sdk"
}

test -z "$INTERACTIVE" && {
    # Shell is non-interactive (something like scp). We should exit now!
	return
}
# =========================== INTERACTIVE STUFF ================================

# Aliases:
alias mysql=mysql5
alias gvim='/Applications/MacVim.app/Contents/MacOS/Vim -g --remote-silent'
alias vlc=/Applications/VLC.app/Contents/MacOS/VLC
alias pfo="open -a Path\ Finder"
alias math=/Applications/Mathematica.app/Contents/MacOS/MathKernel
alias bb=bbedit
alias mp=~/bin/mpost-pdf.pl
alias skim="open -a Skim.app"
alias tclsh="rlwrap tclsh"
alias acrobat="open -a 'Adobe Acrobat Pro'"
alias acroread="open -a 'Adobe Acrobat Pro'"
alias wget="wget --content-disposition" # filename from Content-Disposition
alias grep="grep --color"

# Build options {{{

# clang supports the -arch parameter, which macports gcc does not support
# make scripts for mac may therefore expect -arch to be supported, so
# defaulting to clang may be a good idea
export CC=clang
export CXX=clang

# For å linke mot originale systembibliotek, kan det noen ganger lønne seg å 
# kompilere på samme måte som bibliotekene. Standarden i Snow Leopard er 
# fat binary som inkluderer Intel 32 bit, Intel 64 bit og PowerPC.

export MACOSX_DEPLOYMENT_TARGET=10.8
export CFLAGS=-I/opt/local/include 
export LDFLAGS=-L/opt/local/lib
#export CFLAGS='-O3 -fno-common -arch i386 -arch x86_64 -arch ppc' 
#export LDFLAGS='-O3 -arch i386 -arch x86_64 -arch ppc -bind_at_load' 
#export CXXFLAGS='-O3 -fno-common -arch i386 -arch x86_64 -arch ppc'

# 22/3/2011:
# https://github.com/b4winckler/macvim/pull/12
# Xcode4 does not contain command line tools for ppc platform
# we may have to set  ARCHFLAGS=x86_64
	
#export F77=g95
#export FC=g95 
#  CFLAGS=-m64 CXXFLAGS=-m64 FFLAGS=-m64 FCFLAGS=-m64


# }}}

# LC_CTYPE: Character classification and case conversion
# We set it to UTF-8 to, among other things, show special characters
# in the terminal. Unfortunately some badly designed code requires it to be 
# set to "C". Therefore, if you run into mysterious errors, try setting 
# it to "C".
# Run 'locale' to check the current value.
#export LC_CTYPE=en_GB.UTF-8


# umask 022   # turn off w for g,o (default)
umask 022

# Snip for Mathematica batch execution.
# Usage: mma test.m
mma () { 
    /Applications/Mathematica.app/Contents/MacOS/MathKernel -noprompt -run
    "<<$1" ; 
}

# Snip for showing man pages in Preview.
# Usage: manp <cmd>
manp() {
    man -t "${1}" | open -f -a Preview
}

test -z "$SUBSHELL" && {
    export LC_ALL="en_US.UTF-8"

    echo -e "{ mac }\c"
    # Print a reminder to self 
    echo -e "[$CFLAGS]\c"

    export VMDDIR=/Applications/VMD.app/Contents/vmd
    export VMDBABELBIN=/opt/local/bin/babel

    # XCrysDen env:
    #------------------------------------------------------------------------
    # this is for XCRYSDEN 1.5.53; 
    #------------------------------------------------------------------------
    XCRYSDEN_TOPDIR=/opt/xcrysden-1.5.53
    XCRYSDEN_SCRATCH=/Users/danmichael/tmp/xcrys
    export XCRYSDEN_TOPDIR XCRYSDEN_SCRATCH

    path_prepend $XCRYSDEN_TOPDIR
    path_append $XCRYSDEN_TOPDIR/scripts
    path_append $XCRYSDEN_TOPDIR/util

    RIETAN=/Applications/RIETAN_VENUS
    ORFFE=$RIETAN
    LST2CIF=$RIETAN
    PRIMA=/Applications/RIETAN_VENUS/
    ALBA=$PRIMA
    export RIETAN ORFFE LST2CIF PRIMA ALBA

    export CPAN=ftp://ftp.uninett.no/pub/languages/perl/CPAN

    export DROPBOX=$HOME/Dropbox
    export RSPTHOME=/opt/rspt629

    # Unfortunately, GPAW doesn't work with NumPy 1.6
    # https://trac.fysik.dtu.dk/projects/gpaw/ticket/226
    export GPAW_SETUP_PATH=${HOME}/lib/gpaw-setups/gpaw-setups-0.8.7929

    # Computational Crystallography Toolbox (CCTBX)
    #source ~/code/python/_modules/cctbx/cctbx_build/setpaths.sh   # This is relatively time-consuming...
    export LIBTBX_BUILD="/Users/danmichael/code/python/_modules/cctbx/cctbx_build"

    #test -d /opt/intel &&
    #    . /opt/intel/bin/compilervars.sh intel64 &&
    #    path_append LD_LIBRARY_PATH /opt/intel/mkl/lib
        #path_append DYLD_LIBRARY_PATH /opt/intel/mkl/lib

    #CULA
    export CULA_ROOT=/usr/local/cula
    export CULA_INC_PATH=$CULA_ROOT/include
    export CULA_BIN_PATH_32=$CULA_ROOT/bin
    export CULA_BIN_PATH_64=$CULA_ROOT/bin64
    export CULA_LIB_PATH_32=$CULA_ROOT/lib
    export CULA_LIB_PATH_64=$CULA_ROOT/lib64

    # Platon env:
    PWTDIR=~/tmp/

    # RIETAN VENUS env:
    RIETAN=/Applications/RIETAN_VENUS
    ORFFE=$RIETAN
    LST2CIF=$RIETAN
    PRIMA=/Applications/RIETAN_VENUS/
    ALBA=$PRIMA
    export RIETAN ORFFE LST2CIF PRIMA ALBA
    path_append $RIETAN

    # BC: Quiet startup, load mathlib and extension for familiar function names:
    export BC_ENV_ARGS="-q -l $HOME/.bc/extensions.bc $HOME/.bc/bcrc"

    # QT env:
    export QTDIR=/opt/local/lib/qt3 # used by qtmake

    export PYWIKIBOT2_DIR=/Users/danmichael/code/python/wikipedia/pywikipediabot

    #RVM:
    source "$HOME/.rvm/scripts/rvm" # Load RVM into a shell sess

}

quit () {
    osascript -e "tell app \"$1\" to quit"
}
